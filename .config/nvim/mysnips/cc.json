{
  "main": {
    "prefix": "main",
    "body": [
			"int main(int argc, char** argv)",
			"{",
			"\t$0",
			"\treturn 0;",
			"}"
    ],
    "description": "main function for cc"
  },
  "header-with-class": {
    "prefix": "hcls",
    "body": [
      "#ifndef $1_H_",
			"#define $1_H_",
      "",
      "namespace $2 {",
      "",
			"class $3 {",
			" public:",
			"\t$3();",
			"\t~$3();",
			"",
			" private:",
			"\t$0",
			"};",
			"",
      "} // namespace $2",
      "",
      "#endif // #ifndef $1_H"
    ],
    "description": "define class for cc"
  },
	"struct": {
		"prefix": "stc",
		"body": [
			"struct $1",
			"{",
			"\t$0",
			"};"
		],
		"description": "define struct for cc"
	},
	"string": {
		"prefix": "str",
		"body": [
			"std::string $1;$0"
		],
		"description": "string for cc"
	},
	"vector": {
		"prefix": "vec",
		"body": [
			"std::vector<$1> $2;$0"
		],
		"description": "vector for cc"
	},
	"list": {
		"prefix": "list",
		"body": [
			"std::list<$1> $2;$0"
		],
		"description": "list for cc"
	},
	"queue": {
		"prefix": "que",
		"body": [
			"std::queue<$1> $2;$0"
		],
		"description": "queue for cc"
	},
	"priority_queue": {
		"prefix": "pque",
		"body": [
			"std::priority_queue<$1> $2;$0"
		],
		"description": "priority_queue for cc"
	},
	"deque": {
		"prefix": "deq",
		"body": [
			"std::deque<$1> $2;$0"
		],
		"description": "deque for cc"
	},
	"map": {
		"prefix": "map",
		"body": [
			"std::map<$1, $2> $2;$0"
		],
		"description": "map for cc"
	},
	"map find": {
		"prefix": "afi",
		"body": [
			"auto it = $1.find($2);",
			"if (it != $1.end())",
			"{",
			"\t$0",
			"}"
		],
		"description": "find in map for cc"
	},
	"simple_muduo_server": {
		"prefix": "muds",
		"body": [
			"#include <muduo/net/EventLoop.h>",
			"#include <muduo/base/Logging.h>",
			"#include <muduo/net/InetAddress.h>",
			"#include <muduo/net/TcpServer.h>",
			"",
			"using ::muduo::net::EventLoop;",
			"using ::muduo::net::Buffer;",
			"using ::muduo::Timestamp;",
			"using ::muduo::net::InetAddress;",
			"using ::muduo::net::TcpConnectionPtr;",
			"using ::muduo::net::TcpServer;",
			"using std::placeholders::_1;",
			"using std::placeholders::_2;",
			"using std::placeholders::_3;",
			"",
			"class $1",
			"{",
			"public:",
			"\t$1(EventLoop* loop, const InetAddress& addr)",
			"\t\t:server_(loop, addr, \"$1\")",
			"\t{",
			"\t\tserver_.setConnectionCallback(",
			"\t\t\tstd::bind(&$1::onConnection, this, _1));",
			"\t\tserver_.setMessageCallback(",
			"\t\t\tstd::bind(&$1::onMessage, this, _1, _2, _3));",
			"\t}",
			"",
			"\tvoid start() { server_.start(); }",
			"",
			"private:",
			"\tvoid onConnection(const TcpConnectionPtr& conn)",
			"\t{",
			"\t\tLOG_INFO << conn->peerAddress().toIpPort() << \" -> \"",
			"\t\t\t<< conn->localAddress().toIpPort() << \" is \"",
			"\t\t\t<< (conn->connected() ? \"UP\" : \"DOWN\");",
			"\t\t$2",
			"\t}",
			"",
			"\tvoid onMessage(const TcpConnectionPtr& conn, Buffer* buff, Timestamp recieveTime)",
			"\t{",
			"\t\tLOG_INFO << recieveTime.toString() << \" Recieve Data: \" << buff->toStringPiece();",
			"\t\tconn->send(buff->retrieveAllAsString());",
			"\t\t$0",
			"\t}",
			"",
			"private:",
			"\tTcpServer server_;",
			"};"
		],
		"description": "simple muduo server for cc"
	},
	"simple_muduo_server_with_main": {
		"prefix": "mudsm",
		"body": [
			"#include <cstdio>",
			"#include <cstdlib>",
			"#include <muduo/net/EventLoop.h>",
			"#include <muduo/base/Logging.h>",
			"#include <muduo/net/InetAddress.h>",
			"#include <muduo/net/TcpServer.h>",
			"",
			"using ::muduo::net::EventLoop;",
			"using ::muduo::net::Buffer;",
			"using ::muduo::Timestamp;",
			"using ::muduo::net::InetAddress;",
			"using ::muduo::net::TcpConnectionPtr;",
			"using ::muduo::net::TcpServer;",
			"using std::placeholders::_1;",
			"using std::placeholders::_2;",
			"using std::placeholders::_3;",
			"",
			"class $1",
			"{",
			"public:",
			"\t$1(EventLoop* loop, const InetAddress& addr)",
			"\t\t:server_(loop, addr, \"$1\")",
			"\t{",
			"\t\tserver_.setConnectionCallback(",
			"\t\t\tstd::bind(&$1::onConnection, this, _1));",
			"\t\tserver_.setMessageCallback(",
			"\t\t\tstd::bind(&$1::onMessage, this, _1, _2, _3));",
			"\t}",
			"",
			"\tvoid start() { server_.start(); }",
			"",
			"private:",
			"\tvoid onConnection(const TcpConnectionPtr& conn)",
			"\t{",
			"\t\tLOG_INFO << conn->peerAddress().toIpPort() << \" -> \"",
			"\t\t\t<< conn->localAddress().toIpPort() << \" is \"",
			"\t\t\t<< (conn->connected() ? \"UP\" : \"DOWN\");",
			"\t\t$2",
			"\t}",
			"",
			"\tvoid onMessage(const TcpConnectionPtr& conn, Buffer* buff, Timestamp recieveTime)",
			"\t{",
			"\t\tLOG_INFO << recieveTime.toString() << \" Recieve Data: \" << buff->toStringPiece();",
			"\t\tconn->send(buff->retrieveAllAsString());",
			"\t\t$0",
			"\t}",
			"",
			"private:",
			"\tTcpServer server_;",
			"};",
			"",
			"int main(int argc, char** argv)",
			"{",
			"\tif (argc < 2)",
			"\t{",
			"\t\tprintf(\"Usage: %s port\\n\", argv[0]);",
			"\t\texit(1);",
			"\t}",
			"\tint port = atoi(argv[1]);",
			"\tEventLoop loop;",
			"\t$1 server(&loop, InetAddress(port));",
			"\tserver.start();",
			"\tloop.loop();",
			"\treturn 0;",
			"}"
		],
		"description": "simple muduo server with main for cc"
	},
	"simple_muduo_client": {
		"prefix": "mudc",
		"body": [
			"#include <muduo/net/EventLoop.h>",
			"#include <muduo/base/Logging.h>",
			"#include <muduo/net/InetAddress.h>",
			"#include <muduo/net/TcpClient.h>",
			"",
			"using ::muduo::net::EventLoop;",
			"using ::muduo::net::Buffer;",
			"using ::muduo::Timestamp;",
			"using ::muduo::net::InetAddress;",
			"using ::muduo::net::TcpConnectionPtr;",
			"using ::muduo::net::TcpClient;",
			"using std::placeholders::_1;",
			"using std::placeholders::_2;",
			"using std::placeholders::_3;",
			"",
			"class $1",
			"{",
			"public:",
			"\t$1(EventLoop* loop, const InetAddress& addr)",
			"\t\t:client_(loop, addr, \"$1\")",
			"\t{",
			"\t\tclient_.setConnectionCallback(",
			"\t\t\tstd::bind(&$1::onConnection, this, _1));",
			"\t\tclient_.setMessageCallback(",
			"\t\t\tstd::bind(&$1::onMessage, this, _1, _2, _3));",
			"\t}",
			"",
			"\tvoid connect() { client_.connect(); }",
			"",
			"private:",
			"\tvoid onConnection(const TcpConnectionPtr& conn)",
			"\t{",
			"\t\tLOG_INFO << conn->localAddress().toIpPort() << \" -> \"",
			"\t\t\t<< conn->peerAddress().toIpPort() << \" is \"",
			"\t\t\t<< (conn->connected() ? \"UP\" : \"DOWN\");",
			"\t\t$2",
			"\t}",
			"",
			"\tvoid onMessage(const TcpConnectionPtr& conn, Buffer* buff, Timestamp recieveTime)",
			"\t{",
			"\t\tLOG_INFO << recieveTime.toString() << \" Recieve Data: \" << buff->toStringPiece();",
			"\t\tconn->send(buff->retrieveAllAsString());",
			"\t\t$0",
			"\t}",
			"",
			"private:",
			"\tTcpClient client_;",
			"};"
		],
		"description": "simple muduo client for cc"
	},
	"simple_muduo_client_with_main": {
		"prefix": "mudcm",
		"body": [
			"#include <cstdio>",
			"#include <cstdlib>",
			"#include <muduo/net/EventLoop.h>",
			"#include <muduo/base/Logging.h>",
			"#include <muduo/net/InetAddress.h>",
			"#include <muduo/net/TcpClient.h>",
			"",
			"using ::muduo::net::EventLoop;",
			"using ::muduo::net::Buffer;",
			"using ::muduo::Timestamp;",
			"using ::muduo::net::InetAddress;",
			"using ::muduo::net::TcpConnectionPtr;",
			"using ::muduo::net::TcpClient;",
			"using std::placeholders::_1;",
			"using std::placeholders::_2;",
			"using std::placeholders::_3;",
			"",
			"class $1",
			"{",
			"public:",
			"\t$1(EventLoop* loop, const InetAddress& addr)",
			"\t\t:client_(loop, addr, \"$1\")",
			"\t{",
			"\t\tclient_.setConnectionCallback(",
			"\t\t\tstd::bind(&$1::onConnection, this, _1));",
			"\t\tclient_.setMessageCallback(",
			"\t\t\tstd::bind(&$1::onMessage, this, _1, _2, _3));",
			"\t}",
			"",
			"\tvoid connect() { client_.connect(); }",
			"",
			"private:",
			"\tvoid onConnection(const TcpConnectionPtr& conn)",
			"\t{",
			"\t\tLOG_INFO << conn->localAddress().toIpPort() << \" -> \"",
			"\t\t\t<< conn->peerAddress().toIpPort() << \" is \"",
			"\t\t\t<< (conn->connected() ? \"UP\" : \"DOWN\");",
			"\t\t$2",
			"\t}",
			"",
			"\tvoid onMessage(const TcpConnectionPtr& conn, Buffer* buff, Timestamp recieveTime)",
			"\t{",
			"\t\tLOG_INFO << recieveTime.toString() << \" Recieve Data: \" << buff->toStringPiece();",
			"\t\tconn->send(buff->retrieveAllAsString());",
			"\t\t$0",
			"\t}",
			"",
			"private:",
			"\tTcpClient client_;",
			"};",
			"",
			"int main(int argc, char** argv)",
			"{",
			"\tif (argc < 3)",
			"\t{",
			"\t\tprintf(\"Usage: %s ip port\\n\", argv[0]);",
			"\t\texit(1);",
			"\t}",
			"\tint port = atoi(argv[2]);",
			"\tEventLoop loop;",
			"\t$1 client(&loop, InetAddress(argv[1], port));",
			"\tclient.connect();",
			"\tloop.loop();",
			"\treturn 0;",
			"}"
		],
		"description": "simple muduo client with main for cc"
	},
  "ctm": {
    "prefix": "ctm",
    "body": [
			"{ $1().GetTypeName(), $1Tag },",
			"$0"
    ],
    "description": "for cc"
  }
}
